
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<style>
		body {
			font-family: Ubuntu, Trebuchet MS;
			background-color: #c0c0c0;
			margin: 0px;
			overflow: hidden;
		}
		select {
			font-family: Ubuntu, Trebuchet MS;
		}
	</style>
</head>
<body>

	<script src="three.js"></script>
	<script src="OrbitControls.js"></script>


	<script>

		var container;
		var camera, controls, scene, renderer;
		var cube;
        var parameters;
        var color, size;
        var h;
        


		var materials = [];
      
        
		var info;
		var subdivisions = 2;
		var geometryIndex = 0;
		var scheme = 0;
		var geometry;
		var smooth;

		// start scene

		init();
		animate();

		function nextSubdivision( x ) {
			subdivisions = Math.max( 0, subdivisions + x );
			addStuff();
		}
		function switchGeometry(i) {
			geometryIndex = i;
			addStuff();
		}
		function switchScheme(i) {
			scheme = i;
			addStuff();
		}
		function updateInfo() {

			var dropdown = '<select id="dropdown" onchange="switchGeometry(this.value)">';
			for (  i = 0; i < geometriesParams.length; i ++ ) {
				dropdown += '<option value="' + i + '"';
				dropdown += (geometryIndex == i)  ? ' selected' : '';
				dropdown += '>' + geometriesParams[i].name + '</option>';
			}
			dropdown += '</select>';

			info.innerHTML = 
				'<br>Geometry: ' + dropdown +
				'<br>Subdivision scheme: ' +
				'<a href="#" onclick="switchScheme(0); return false;">Loop</a> / <a href="#" onclick="switchScheme(1); return false;">Catmull Clark</a>' +
				'<br>Subdivisions: '  + subdivisions +
				'&nbsp;&nbsp;<a href="#" onclick="nextSubdivision(1); return false;">more</a> / <a href="#" onclick="nextSubdivision(-1); return false;">less</a>' +
				'<br><br>Vertices count: before ' + geometry.vertices.length + ' after ' + smooth.vertices.length +
				'<br>Face count: before ' + geometry.faces.length + ' after ' + smooth.faces.length
			;
		}

        function addParticles() {
            scene.fog = new THREE.FogExp2( 0x000000, 0.001 );
            
            geometry = new THREE.Geometry();
            

            for ( i = 0; i < 20000; i ++ ) {

                var vertex = new THREE.Vector3();
                vertex.x = 2000 * Math.random() - 1000;
                vertex.y = 2000 * Math.random() - 1000;
                vertex.z = 2000 * Math.random() - 1000;

                geometry.vertices.push( vertex );

            }
            
            parameters = [
					[ [1, 1, 0.5], 5 ],
					[ [0.95, 1, 0.5], 4 ],
					[ [0.90, 1, 0.5], 3 ],
					[ [0.85, 1, 0.5], 2 ],
					[ [0.80, 1, 0.5], 1 ]
				];

				for ( i = 0; i < 1; i ++ ) {

					color = parameters[i][0];
					size  = parameters[i][1];

					materials[i] = new THREE.PointCloudMaterial( { size: size } );

					particles = new THREE.PointCloud( geometry, materials[i] );

					particles.rotation.x = Math.random() * 6;
					particles.rotation.y = Math.random() * 6;
					particles.rotation.z = Math.random() * 6;

					scene.add( particles );

				}
        }
    

		function init() {
			container = document.createElement( 'div' );
			document.body.appendChild( container );

			info = document.createElement( 'div' );
			info.style.position = 'absolute';
			info.style.top = '10px';
			info.style.width = '100%';
			info.style.textAlign = 'center';
			info.innerHTML = '';
			container.appendChild( info );

			camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 1000 );
			camera.position.z = 500;

			scene = new THREE.Scene();
            
        
			var light = new THREE.PointLight( 0xffffff, 1.5 );
			light.position.set( 1000, 1000, 2000 );
			scene.add( light );

			//addStuff();
            addParticles()

			//renderer = new THREE.WebGLRenderer( { antialias: true, clearAlpha: 1} ); // WebGLRenderer CanvasRenderer
            renderer = new THREE.WebGLRenderer(); // WebGLRenderer CanvasRenderer
            //set background color
			renderer.setClearColor( 0x000000 );
			renderer.setSize( window.innerWidth, window.innerHeight );

			container.appendChild( renderer.domElement );

			controls = new THREE.OrbitControls( camera, renderer.domElement );

			window.addEventListener( 'resize', onWindowResize, false );
		}

		function onWindowResize() {
			camera.aspect = window.innerWidth / window.innerHeight;
			camera.updateProjectionMatrix();

			renderer.setSize( window.innerWidth, window.innerHeight );
		}

		function animate() {
			requestAnimationFrame( animate );
			controls.update();
			render();
		}

		function render() {
            var time = Date.now() * 0.00005;


            for ( i = 0; i < scene.children.length; i ++ ) {

                var object = scene.children[ i ];

                if ( object instanceof THREE.PointCloud ) {

                    object.rotation.y = time * ( i < 4 ? i + 1 : - ( i + 1 ) );

                }

            }

            for ( i = 0; i < materials.length; i ++ ) {

                color = parameters[i][0];

                h = ( 360 * ( color[0] + time ) % 360 ) / 360;
                materials[i].color.setHSL( h, color[1], color[2] );

            }
            
			renderer.render( scene, camera );
		}

	</script>

</body>
</html>


